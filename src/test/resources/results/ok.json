[
  {
    "filePath": "c:\\workspace\\SonarTsPlugin\\src\\test\\resources\\dashboard.js",
    "messages": [
      {
        "ruleId": "angular/controller-name",
        "severity": 2,
        "message": "The DashboardCtrl controller should follow this pattern: /[A-Z].*Controller$/",
        "line": 1,
        "column": 1,
        "nodeType": "CallExpression",
        "source": "angular.module('dashboard', ['resources.projects', 'resources.tasks'])"
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 1,
        "column": 16,
        "nodeType": "Literal",
        "source": "angular.module('dashboard', ['resources.projects', 'resources.tasks'])",
        "fix": {
          "range": [
            15,
            26
          ],
          "text": "\"dashboard\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 1,
        "column": 30,
        "nodeType": "Literal",
        "source": "angular.module('dashboard', ['resources.projects', 'resources.tasks'])",
        "fix": {
          "range": [
            29,
            49
          ],
          "text": "\"resources.projects\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 1,
        "column": 52,
        "nodeType": "Literal",
        "source": "angular.module('dashboard', ['resources.projects', 'resources.tasks'])",
        "fix": {
          "range": [
            51,
            68
          ],
          "text": "\"resources.tasks\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 3,
        "column": 14,
        "nodeType": "Literal",
        "source": "    .config(['$routeProvider', function ($routeProvider) {",
        "fix": {
          "range": [
            85,
            101
          ],
          "text": "\"$routeProvider\""
        }
      },
      {
        "ruleId": "angular/di",
        "severity": 2,
        "message": "You should use the function syntax for DI",
        "line": 3,
        "column": 32,
        "nodeType": "FunctionExpression",
        "source": "    .config(['$routeProvider', function ($routeProvider) {"
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 8 spaces.",
        "line": 4,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $routeProvider.when('/dashboard', {",
        "fix": {
          "range": [
            131,
            139
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "angular/controller-as-route",
        "severity": 2,
        "message": "Route \"/dashboard\" should use controllerAs syntax",
        "line": 4,
        "column": 9,
        "nodeType": "CallExpression",
        "source": "        $routeProvider.when('/dashboard', {"
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 4,
        "column": 29,
        "nodeType": "Literal",
        "source": "        $routeProvider.when('/dashboard', {",
        "fix": {
          "range": [
            159,
            171
          ],
          "text": "\"/dashboard\""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 12 spaces.",
        "line": 5,
        "column": 13,
        "nodeType": "Property",
        "source": "            templateUrl: 'dashboard/dashboard.tpl.html',",
        "fix": {
          "range": [
            175,
            187
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 5,
        "column": 26,
        "nodeType": "Literal",
        "source": "            templateUrl: 'dashboard/dashboard.tpl.html',",
        "fix": {
          "range": [
            200,
            230
          ],
          "text": "\"dashboard/dashboard.tpl.html\""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 12 spaces.",
        "line": 6,
        "column": 13,
        "nodeType": "Property",
        "source": "            controller: 'DashboardCtrl',",
        "fix": {
          "range": [
            232,
            244
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 6,
        "column": 25,
        "nodeType": "Literal",
        "source": "            controller: 'DashboardCtrl',",
        "fix": {
          "range": [
            256,
            271
          ],
          "text": "\"DashboardCtrl\""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 12 spaces.",
        "line": 7,
        "column": 13,
        "nodeType": "Property",
        "source": "            resolve: {",
        "fix": {
          "range": [
            273,
            285
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 16 spaces.",
        "line": 8,
        "column": 17,
        "nodeType": "Property",
        "source": "                projects: ['Projects', function (Projects) {",
        "fix": {
          "range": [
            296,
            312
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 8,
        "column": 28,
        "nodeType": "Literal",
        "source": "                projects: ['Projects', function (Projects) {",
        "fix": {
          "range": [
            323,
            333
          ],
          "text": "\"Projects\""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 20 spaces.",
        "line": 10,
        "column": 21,
        "nodeType": "ReturnStatement",
        "source": "                    return Projects.all();",
        "fix": {
          "range": [
            420,
            440
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 10,
        "column": 42,
        "nodeType": "ReturnStatement",
        "source": "                    return Projects.all();",
        "fix": {
          "range": [
            461,
            462
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 16 spaces.",
        "line": 11,
        "column": 17,
        "nodeType": "BlockStatement",
        "source": "                }],",
        "fix": {
          "range": [
            463,
            479
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 16 spaces.",
        "line": 12,
        "column": 17,
        "nodeType": "Property",
        "source": "                tasks: ['Tasks', function (Tasks) {",
        "fix": {
          "range": [
            483,
            499
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 12,
        "column": 25,
        "nodeType": "Literal",
        "source": "                tasks: ['Tasks', function (Tasks) {",
        "fix": {
          "range": [
            507,
            514
          ],
          "text": "\"Tasks\""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 20 spaces.",
        "line": 14,
        "column": 21,
        "nodeType": "ReturnStatement",
        "source": "                    return Tasks.all();",
        "fix": {
          "range": [
            598,
            618
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 14,
        "column": 39,
        "nodeType": "ReturnStatement",
        "source": "                    return Tasks.all();",
        "fix": {
          "range": [
            636,
            637
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 16 spaces.",
        "line": 15,
        "column": 17,
        "nodeType": "BlockStatement",
        "source": "                }]",
        "fix": {
          "range": [
            638,
            654
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 12 spaces.",
        "line": 16,
        "column": 13,
        "nodeType": "ObjectExpression",
        "source": "            }",
        "fix": {
          "range": [
            657,
            669
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 8 spaces.",
        "line": 17,
        "column": 9,
        "nodeType": "ObjectExpression",
        "source": "        });",
        "fix": {
          "range": [
            671,
            679
          ],
          "text": ""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 17,
        "column": 11,
        "nodeType": "ExpressionStatement",
        "source": "        });",
        "fix": {
          "range": [
            681,
            682
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 4 spaces.",
        "line": 18,
        "column": 5,
        "nodeType": "BlockStatement",
        "source": "    }])",
        "fix": {
          "range": [
            683,
            687
          ],
          "text": ""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 20,
        "column": 17,
        "nodeType": "Literal",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {",
        "fix": {
          "range": [
            708,
            723
          ],
          "text": "\"DashboardCtrl\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 20,
        "column": 35,
        "nodeType": "Literal",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {",
        "fix": {
          "range": [
            726,
            734
          ],
          "text": "\"$scope\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 20,
        "column": 45,
        "nodeType": "Literal",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {",
        "fix": {
          "range": [
            736,
            747
          ],
          "text": "\"$location\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 20,
        "column": 58,
        "nodeType": "Literal",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {",
        "fix": {
          "range": [
            749,
            759
          ],
          "text": "\"projects\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 20,
        "column": 70,
        "nodeType": "Literal",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {",
        "fix": {
          "range": [
            761,
            768
          ],
          "text": "\"tasks\""
        }
      },
      {
        "ruleId": "angular/di",
        "severity": 2,
        "message": "You should use the function syntax for DI",
        "line": 20,
        "column": 79,
        "nodeType": "FunctionExpression",
        "source": "    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {"
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 8 spaces.",
        "line": 21,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.projects = projects;",
        "fix": {
          "range": [
            818,
            826
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "angular/controller-as",
        "severity": 2,
        "message": "You should not set properties on $scope in controllers. Use controllerAs syntax and add data to \"this\"",
        "line": 21,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.projects = projects;"
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 21,
        "column": 35,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.projects = projects;",
        "fix": {
          "range": [
            852,
            853
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 8 spaces.",
        "line": 22,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.tasks = tasks;",
        "fix": {
          "range": [
            854,
            862
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "angular/controller-as",
        "severity": 2,
        "message": "You should not set properties on $scope in controllers. Use controllerAs syntax and add data to \"this\"",
        "line": 22,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.tasks = tasks;"
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 22,
        "column": 29,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.tasks = tasks;",
        "fix": {
          "range": [
            882,
            883
          ],
          "text": ""
        }
      },
      {
        "ruleId": "angular/controller-as",
        "severity": 2,
        "message": "You should not set properties on $scope in controllers. Use controllerAs syntax and add data to \"this\"",
        "line": 24,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.manageBacklog = function (projectId) {"
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 8 spaces.",
        "line": 24,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.manageBacklog = function (projectId) {",
        "fix": {
          "range": [
            885,
            893
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 12 spaces.",
        "line": 25,
        "column": 13,
        "nodeType": "ExpressionStatement",
        "source": "            $location.path('/projects/' + projectId + '/productbacklog');",
        "fix": {
          "range": [
            939,
            951
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 25,
        "column": 28,
        "nodeType": "Literal",
        "source": "            $location.path('/projects/' + projectId + '/productbacklog');",
        "fix": {
          "range": [
            966,
            978
          ],
          "text": "\"/projects/\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 25,
        "column": 55,
        "nodeType": "Literal",
        "source": "            $location.path('/projects/' + projectId + '/productbacklog');",
        "fix": {
          "range": [
            993,
            1010
          ],
          "text": "\"/productbacklog\""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 25,
        "column": 73,
        "nodeType": "ExpressionStatement",
        "source": "            $location.path('/projects/' + projectId + '/productbacklog');",
        "fix": {
          "range": [
            1011,
            1012
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 8 spaces.",
        "line": 26,
        "column": 9,
        "nodeType": "BlockStatement",
        "source": "        };",
        "fix": {
          "range": [
            1013,
            1021
          ],
          "text": ""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 26,
        "column": 10,
        "nodeType": "ExpressionStatement",
        "source": "        };",
        "fix": {
          "range": [
            1022,
            1023
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 8 spaces.",
        "line": 28,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.manageSprints = function (projectId) {",
        "fix": {
          "range": [
            1025,
            1033
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "angular/controller-as",
        "severity": 2,
        "message": "You should not set properties on $scope in controllers. Use controllerAs syntax and add data to \"this\"",
        "line": 28,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "source": "        $scope.manageSprints = function (projectId) {"
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 1 tab but found 12 spaces.",
        "line": 29,
        "column": 13,
        "nodeType": "ExpressionStatement",
        "source": "            $location.path('/projects/' + projectId + '/sprints');",
        "fix": {
          "range": [
            1079,
            1091
          ],
          "text": "\t"
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 29,
        "column": 28,
        "nodeType": "Literal",
        "source": "            $location.path('/projects/' + projectId + '/sprints');",
        "fix": {
          "range": [
            1106,
            1118
          ],
          "text": "\"/projects/\""
        }
      },
      {
        "ruleId": "quotes",
        "severity": 2,
        "message": "Strings must use doublequote.",
        "line": 29,
        "column": 55,
        "nodeType": "Literal",
        "source": "            $location.path('/projects/' + projectId + '/sprints');",
        "fix": {
          "range": [
            1133,
            1143
          ],
          "text": "\"/sprints\""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 29,
        "column": 66,
        "nodeType": "ExpressionStatement",
        "source": "            $location.path('/projects/' + projectId + '/sprints');",
        "fix": {
          "range": [
            1144,
            1145
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 8 spaces.",
        "line": 30,
        "column": 9,
        "nodeType": "BlockStatement",
        "source": "        };",
        "fix": {
          "range": [
            1146,
            1154
          ],
          "text": ""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 30,
        "column": 10,
        "nodeType": "ExpressionStatement",
        "source": "        };",
        "fix": {
          "range": [
            1155,
            1156
          ],
          "text": ""
        }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 0 tabs but found 4 spaces.",
        "line": 31,
        "column": 5,
        "nodeType": "BlockStatement",
        "source": "    }]);",
        "fix": {
          "range": [
            1157,
            1161
          ],
          "text": ""
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Extra semicolon.",
        "line": 31,
        "column": 8,
        "nodeType": "ExpressionStatement",
        "source": "    }]);",
        "fix": {
          "range": [
            1164,
            1165
          ],
          "text": ""
        }
      }
    ],
    "errorCount": 58,
    "warningCount": 0,
    "source": "angular.module('dashboard', ['resources.projects', 'resources.tasks'])\n\n    .config(['$routeProvider', function ($routeProvider) {\n        $routeProvider.when('/dashboard', {\n            templateUrl: 'dashboard/dashboard.tpl.html',\n            controller: 'DashboardCtrl',\n            resolve: {\n                projects: ['Projects', function (Projects) {\n                    //TODO: need to know the current user here\n                    return Projects.all();\n                }],\n                tasks: ['Tasks', function (Tasks) {\n                    //TODO: need to know the current user here\n                    return Tasks.all();\n                }]\n            }\n        });\n    }])\n\n    .controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {\n        $scope.projects = projects;\n        $scope.tasks = tasks;\n\n        $scope.manageBacklog = function (projectId) {\n            $location.path('/projects/' + projectId + '/productbacklog');\n        };\n\n        $scope.manageSprints = function (projectId) {\n            $location.path('/projects/' + projectId + '/sprints');\n        };\n    }]);"
  }
]